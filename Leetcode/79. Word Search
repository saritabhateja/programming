class Solution {
    public boolean exist(char[][] board, String word) {
        int row = board.length;
        int col = board[0].length;
        
        for(int i=0; i<row; i++)
        {
            for(int j=0; j<col; j++)
            {
                if(helper(i, j, board, word, 0))
                    return true;
            }
        }  
        return false;
    }
    
    private boolean helper(int i, int j, char[][] board, String word, int index)
    {
        if(index == word.length()) return true;
        
        if(i < 0 || j < 0 || i >= board.length || j >= board[0].length || word.charAt(index) != board[i][j]) return false;
        
        board[i][j] = '0';    // marks the cell as visited
        
        boolean result = helper(i, j-1, board, word, index+1) || 
                        helper(i, j+1, board, word, index+1) ||
                        helper(i-1, j, board, word, index+1) || 
                        helper(i+1, j, board, word, index+1);
        
        board[i][j] = word.charAt(index);   // restores the array so it can be used in further iterations
        
        return result;
    }
}
