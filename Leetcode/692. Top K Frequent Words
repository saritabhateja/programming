class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        
        HashMap<String, Integer> wordCount = new HashMap<String, Integer>();
        List<String> res = new ArrayList<>();
        
        for(int i = 0; i < words.length; i++){
            int previousCount = wordCount.getOrDefault(words[i], 0);
            wordCount.put(words[i], ++previousCount);
        }
        
        PriorityQueue<String> pq = new PriorityQueue<>(k+1, new Comparator<String>(){
            public int compare(String a, String b){
                if(wordCount.get(a) != wordCount.get(b))
                    return wordCount.get(a) - wordCount.get(b);
                else
                    return b.compareTo(a);
            }
        });
        
        for(String s : wordCount.keySet()){
            pq.offer(s);
            if(pq.size() > k) pq.poll();
        }
        System.out.println(pq.size());
        while(!pq.isEmpty())
            res.add(pq.poll());
        Collections.reverse(res);
        return res;
    }
}
