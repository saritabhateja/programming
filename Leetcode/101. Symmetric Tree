//Recursive
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        
        if(root==null)return true;
        return helper(root.left, root.right);
    }
    
    public boolean helper(TreeNode p, TreeNode q)
    {
        if(p==null && q==null)return true;
        if(p==null || q==null)return false;
        
        return (p.val==q.val) && helper(p.left, q.right) && helper(p.right, q.left);
    }
}

//Iterative using stack
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        
        if(root==null)return true;
        
        Stack<TreeNode> st = new Stack<>();
        if(root.left != null)
        {
            if(root.right ==null) return false;
            else
            {
                st.push(root.left);
                st.push(root.right);
            }
        }
        
        else if(root.right != null)
            return false;
        
        while(!st.isEmpty())
        {
            TreeNode r = st.pop();
            TreeNode l = st.pop();
            
            if(r.val != l.val) return false;
            
            if(l.left != null)
            {
                if(r.right==null) return false;
                st.push(l.left);
                st.push(r.right);
            }
            
            else if(r.right != null)
                return false;
            
            if(l.right != null)
            {
                if(r.left == null) return false;
                st.push(l.right);
                st.push(r.left);
            }
            
            else if(r.left != null)
                return false;
        }
        
        return true;
    }
