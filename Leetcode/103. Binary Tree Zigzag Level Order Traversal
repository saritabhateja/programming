//iterative

public class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> prim = new ArrayList<List<Integer>>();
        List<Integer> sec = new ArrayList<>();
        levelOrderHelper(prim, sec, root);
        return prim;
    }
    
    private void levelOrderHelper(List<List<Integer>> prim, List<Integer> sec, TreeNode root)
    {
        if(root==null)return;
        
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        q.offer(root);
        boolean order = true;
        
        while(!q.isEmpty())
        {
            sec = new ArrayList<>();
            int size = q.size();
            
            for(int i=0; i<size; i++)
            {
                root = q.poll();
                if(order)
                    sec.add(root.val);
                else
                    sec.add(0, root.val);
            
                if(root.left!=null)
                    q.offer(root.left);
                if(root.right!=null)
                    q.offer(root.right);
            }
            
            prim.add(sec);
            order = order ? false : true;   
        }
    }
}

#recursive

public class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        helper(res, root, 0);
        return res;
    }
    
    private void helper(List<List<Integer>> res, TreeNode root, int level)
    {
        if(root == null) return;
        
        if(res.size() <= level)
            res.add(new ArrayList<>());
        
        if(level % 2 == 0)
            res.get(level).add(root.val);
        else
            res.get(level).add(0,root.val);
        
        helper(res, root.left, level+1);
        helper(res, root.right, level+1);
    }
}
