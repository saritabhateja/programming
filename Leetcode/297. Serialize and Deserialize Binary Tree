/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null) return "";
        Queue<TreeNode> q = new LinkedList<>();
        StringBuilder sb = new StringBuilder();
        q.offer(root);
        
        while(!q.isEmpty())
        {
            TreeNode n = q.poll();
            if(n == null)
                sb.append("XX "); 
            
             else
             {
                sb.append(n.val + " ");
                q.offer(n.left);
                q.offer(n.right);
             } 
        }
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data == "") return null;
        Queue<TreeNode> q = new LinkedList<>();
        String[] arr = data.split(" ");
        TreeNode root = new TreeNode(Integer.parseInt(arr[0]));
        q.offer(root);
        
        for(int i=1; i<arr.length; i++)
        {
            TreeNode n = q.poll();
            if(!arr[i].equals("XX"))
            {
                TreeNode left = new TreeNode(Integer.parseInt(arr[i]));
                n.left = left;
                q.offer(left);
            }
            
            if((i+1) < arr.length && !arr[++i].equals("XX"))
            {
                TreeNode right = new TreeNode(Integer.parseInt(arr[i]));
                n.right = right;
                q.offer(right);
            }
        }
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
