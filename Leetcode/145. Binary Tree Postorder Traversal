// Iterative solution - use addFirst method of linkedlist
public class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        LinkedList<Integer> list = new LinkedList<>();
        if(root==null)return list;
        Stack<TreeNode> stack = new Stack<>();
        TreeNode curr = root;
        stack.push(curr);
        
        while(!stack.isEmpty())
        {
            curr = stack.pop();
            list.addFirst(curr.val);
            if(curr.left!=null) stack.push(curr.left);
            if(curr.right!=null)stack.push(curr.right);
        }
        return list;
    }
}

// recursive solution
public class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        if(root==null)return list;
        list.addAll(postorderTraversal(root.left));
        list.addAll(postorderTraversal(root.right));
        list.add(root.val);
        
        return list;
    }
}
