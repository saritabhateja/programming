// Iterative solution
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        if(root==null) return list;
        Stack<TreeNode> q = new Stack<>();
        TreeNode curr = root;
        q.push(root);
        
        while(!q.isEmpty())
        {
            curr = q.pop();
            list.add(curr.val);
            if(curr.right!=null) q.push(curr.right);
            if(curr.left!=null)q.push(curr.left);    
        }
        return list;
    }
}

//Recursive solution
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        if(root==null)return list;
        list.add(root.val);
        list.addAll(preorderTraversal(root.left));
        list.addAll(preorderTraversal(root.right));
        
        return list;
    }
}
