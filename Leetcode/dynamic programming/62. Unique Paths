// Top down approach

public class Solution {
    public int uniquePaths(int m, int n) {
        if(m==0) return 0;
        int[][] v = new int[m][n];
        for(int[] row: v)
            Arrays.fill(row, -1);
        return helper(m-1, n-1, v);
    }
    
    private int helper(int m, int n, int[][] v)
    {
        if(m==0 || n==0) return 1;
        if(v[m-1][n-1] > -1)return v[m-1][n-1];
        
         v[m-1][n-1] = helper(m-1, n, v) + helper(m, n-1, v);
        
        return v[m-1][n-1]; 
          }
}

// Bottom up
public class Solution {
    public int uniquePaths(int m, int n) {
       int[][] v = new int[m][n];
        
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(i==0 || j==0) 
                    v[i][j] = 1;
                
                else
                    v[i][j] = v[i-1][j] + v[i][j-1];
            }
        }
        return v[m-1][n-1]; 
    }
}
